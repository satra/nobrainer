# Container spec which includes TensorFlow's build dependencies but does not
# include TensorFlow itself.
# Much of this document is taken from
# https://github.com/tensorflow/tensorflow/blob/036284bfbf78066ef74663bf3750bd728e03459a/tensorflow/tools/docker/Dockerfile.devel-gpu
#
# Use this container to build TensorFlow with optimizations for your platform.
#
# Usage
# -----
#
# Mount TensorFlow root source directory to /tensorflow.
# Mount a directory to /output. The TensorFlow wheel will be available here.
# Mount a directory to /cache. The bazel build cache will be here.
#
# Build:
# $ tensorflow/tools/ci_build/builds/configured GPU \
#     bazel build -c opt --config=cuda --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
#       tensorflow/tools/pip_package:build_pip_package
#
# Build Python wheel:
# $ bazel-bin/tensorflow/tools/pip_package/build_pip_package /output
#

FROM nvidia/cuda:9.0-base-ubuntu16.04

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        cuda-command-line-tools-9-0 \
        cuda-cublas-dev-9-0 \
        cuda-cudart-dev-9-0 \
        cuda-cufft-dev-9-0 \
        cuda-curand-dev-9-0 \
        cuda-cusolver-dev-9-0 \
        cuda-cusparse-dev-9-0 \
        curl \
        git \
        libcudnn7=7.0.5.15-1+cuda9.0 \
        libcudnn7-dev=7.0.5.15-1+cuda9.0 \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python3-dev \
        python3-numpy \
        unzip \
        zip \
        zlib1g-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /var/tmp/* /tmp/* \
    && find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \
    && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a \
    && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \
    # This should usually not be done... but we're virtualized.
    && ln -sfv /usr/bin/python3 /usr/bin/python \
    && curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \
    && python get-pip.py \
    && rm get-pip.py

# Install the most recent bazel release.
ENV BAZEL_VERSION="0.10.1" \
    LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}"

RUN \
    # Running bazel inside a `docker build` command causes trouble, cf:
    #   https://github.com/bazelbuild/bazel/issues/134
    # The easiest solution is to set up a bazelrc file forcing --batch.
    echo "startup --batch" >> /etc/bazel.bazelrc \
    # Similarly, we need to workaround sandboxing issues:
    #   https://github.com/bazelbuild/bazel/issues/418
    && echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
        >> /etc/bazel.bazelrc \
    && mkdir /bazel \
    && cd /bazel \
    && curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \
    && curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \
    && chmod +x bazel-*.sh \
    && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \
    && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Configure the build for our CUDA configuration.
ENV CI_BUILD_PYTHON=python3 \
    TF_CUDA_COMPUTE_CAPABILITIES="3.0,3.5,5.2,6.0,6.1" \
    TF_CUDA_VERSION="9.0" \
    TF_CUDNN_VERSION=7 \
    TF_CUDA_CLANG=0 \
    TF_NEED_CUDA=1 \
    TF_NEED_JEMALLOC=1 \
    TF_NEED_S3=0 \
    TF_NEED_GCP=0 \
    TF_NEED_HDFS=0 \
    TF_NEED_KAFKA=0 \
    TF_NEED_OPENCL_SYCL=0 \
    TF_NEED_COMPUTECPP=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_MPI=0 \
    TF_NEED_TENSORRT=0 \
    CC_OPT_FLAGS="-march=native"

WORKDIR /tensorflow
